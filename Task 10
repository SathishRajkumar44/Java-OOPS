Problem 1: Create a class called "Person" with attributes "name" and "age". Also create a constructor and getter methods for the attributes.

public class Person {
    // Attributes
    private String name;
    private int age;

    // Constructor
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Getter methods
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}




Problem 2: Create an implementation for a Java class named "Employee" that represents an employee with attributes including ID, name, and salary. 
The class includes a method called raiseSalary(percent), which updates the salary by a specified percentage.


public class Employee {
    
    private int id;
    private String firstName;
    private String lastName;
    private int salary;

    
    public Employee(int id, String firstName, String lastName, int salary) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.salary = salary;
    }

    public int getID() {
        return id;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public int getSalary() {
        return salary;
    }

  
    public void setSalary(int salary) {
        this.salary = salary;
    }

    
    public int raiseSalary(int percent) {
        double increaseFactor = 1 + (percent / 100.0);
        salary = (int) (salary * increaseFactor);
        return salary;
    }

   
    public int getAnnualSalary() {
        return salary * 12;
    }

    // toString method to represent the Employee object as a string
    @Override
    public String toString() {
        return "Employee[id=" + id + ", name=" + firstName + " " + lastName + ", salary=" + salary + "]";
    }
}




Problem 3: Create a Circle class with a radius as a data member. Create two constructors (no argument, and two arguments) and a method to calculate Circumference.

public class Circle {
  
    private double radius;

   
    public Circle() {
        // Default constructor with no arguments
        this.radius = 1.0; // Default radius
    }

    public Circle(double radius) {
        // Constructor with one argument
        this.radius = radius;
    }

    // Method to calculate Circumference
    public double calculateCircumference() {
        return 2 * Math.PI * radius;
    }
}




Problem 4: Create an Account class with a balance as a data member. Create two constructors (no argument, and two arguments) and methods to withdraw and deposit balance.


public class Account {
    
    private double balance;

    
    public Account() {
        
        this.balance = 0.0; // Default balance
    }

    public Account(double balance) {
       
        this.balance = balance;
    }

    
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawal successful. Remaining balance: " + balance);
        } else {
            System.out.println("Invalid withdrawal amount or insufficient balance.");
        }
    }

  
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposit successful. New balance: " + balance);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }
}




Problem 5: Create a Tea class in Java with methods to prepare basic tea, add milk, and add sugar.

public class Tea {
  
    public void prepareTea() {
        System.out.println("Preparing basic tea with hot water and tea leaves.");
    }

   
    public void addMilk() {
        System.out.println("Adding milk to the tea.");
    }

    
    public void addSugar() {
        System.out.println("Adding sugar to the tea.");
    }
}





Problem 6: Create three subclasses of the Tea class: BlackTea, GreenTea, and HerbalTea. Each subclass should override the prepareTea method to prepare 
the specific type of tea with appropriate ingredients and brewing times.


public class BlackTea extends Tea {
    @Override
    public void prepareTea() {
        System.out.println("Preparing Black Tea with hot water and black tea leaves. Brew for 3 minutes.");
    }
}

public class GreenTea extends Tea {
    @Override
    public void prepareTea() {
        System.out.println("Preparing Green Tea with hot water and green tea leaves. Brew for 2 minutes.");
    }
}

public class HerbalTea extends Tea {
    @Override
    public void prepareTea() {
        System.out.println("Preparing Herbal Tea with hot water and herbal tea blend. Brew for 5 minutes.");
    }
}




Problem 7: Implement polymorphism in your program by creating an array of Tea objects that includes instances of the Tea class and its subclasses.

public class PolymorphismExample {
    public static void main(String[] args) {
       
        Tea[] teas = new Tea[4];
        
        
        teas[0] = new Tea();
        teas[1] = new BlackTea();
        teas[2] = new GreenTea();
        teas[3] = new HerbalTea();
        
        for (Tea tea : teas) {
            tea.prepareTea();
        }
    }
}




